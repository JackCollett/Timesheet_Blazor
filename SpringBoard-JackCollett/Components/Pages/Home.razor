@page "/"
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@using static Components.Pages.Counter
@inject AppDbContext Db

<PageTitle>Home</PageTitle>

<h1>Hello, Employee!</h1>

<br><br/>

<h1>Entries:</h1>
@* Drop Down for seaching by Employee Number *@
<select @bind="selectedEmployee" class="form-select">
    <option value="">--All Employees--</option>
    @for (int emp = 1; emp <= 300; emp++)
    {
        <option value="@emp">@emp</option>
    }
</select>
@* List to Display entries *@
    <table style="width:100%">
        <tr>
            <th>Employee Number</th>
            <th>Date</th>
            <th>Hours</th>
            <th>Job Number</th>
        </tr>
        @foreach (var entry in FilterEntries) 
        {
            <tr>
                <td>@entry.Employee</td>
                <td>@entry.Today</td>
                <td>@entry.Hours</td>
                <td>@entry.Job</td>
            </tr>
        }
    </table>
@* <ul>
    @foreach (var entry in FilterEntries)
    {
        <li>
            Employee: @entry.Employee, Date: @entry.Today, Hours: @entry.Hours, Job: @entry.Job
        </li>
    }
</ul> *@
@* Form for new Entry *@
<form>
    <label for="enumber">Employee Number:</label>
    <input type="number" id="enumber" @bind="eNumber">
    <label for="date">Date:</label>
    <input type="date" id="date" @bind="date">
    <label for="j">Job Number:</label>
    <input type="number" id="j" @bind="job">
    <label for="h">Hours:</label>
    <input type="number" id="h" @bind="hours">
</form>
@* Add Entry Button *@
<button class="button btn-primary" @onclick="AddEntry">Add Entry</button>
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
@code {
    
    // List of entries 
    // Property with getter to handle search entries by Employee
    private int? selectedEmployee = null;

    private IEnumerable<TimesheetEntry> FilterEntries => selectedEmployee is null
        ? entries
        : entries.Where(e => e.Employee == selectedEmployee);

    //  Equivalent if-else statement 
    @* IEnumerable<TimesheetEntry> FilteredEntries;

    if (selectedEmployee is null)
    {
        FilteredEntries = entries;
    }
    else
    {
        FilteredEntries = entries.Where(e => e.Employee == selectedEmployee);
    } *@

    // List all Entries
    private List<TimesheetEntry> entries = new();
    protected override async Task OnInitializedAsync()
    {
        entries = await Db.TimesheetEntries.ToListAsync();
    }

 
    // Function for adding entries
        private int eNumber = 0;
        private DateOnly date = DateOnly.FromDateTime(DateTime.Now);
        private int job = 0;
        private int hours = 0;

        private string? errorMessage;

        private async Task AddEntry()
    {
        var newEntry = new TimesheetEntry
        {
            Employee = eNumber, 
            Today = date, 
            Hours = hours, 
            Job = job
        };
        if (newEntry.Today > DateOnly.FromDateTime(DateTime.Today))
        {
            errorMessage = "Please only select a present or past date";
            return;
        }
        if (newEntry.Employee < 1 || newEntry.Employee > 300) 
        {
            errorMessage = "Please enter your employee number (1-300)";
            return;
        }
        if (newEntry.Hours < 1 || newEntry.Hours > 8) 
        {
            errorMessage = "Please enter the number of hours (0-8)";
            return;
        }
        if (newEntry.Job < 1 || newEntry.Job > 999) 
        {
            errorMessage = "Please enter the valid job number (1-999)";
            return;
        }
        else
        {
            errorMessage = string.Empty;
            Db.TimesheetEntries.Add(newEntry);
            await Db.SaveChangesAsync();
            entries = await Db.TimesheetEntries.ToListAsync(); // Refresh
        }
    }

}